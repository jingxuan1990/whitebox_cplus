#ifndef __AES_H__
#define __AES_H__

# include "type.h"
# include "util.h"

//
// AES 声明

template<keyLength L>
class AES{
    
private:
    static const TB256 sbox;
    static const TB256 invSbox;
    
    //Nb Number of columns (32-bit words) comprising the State. For this standard, Nb = 4.
    static const int m_Nb;
    
    //Nk Number of 32-bit words comprising the Cipher Key. For this standard, Nk = 4, 6, or 8.
    int m_Nk;
    
    //Nr Number of rounds, which is a function of Nk and Nb (which isfixed). For this standard, Nr = 10, 12, or 14.
    int m_Nr;

    BYTE m_key[L/8+1];
    BYTE m_w[4*4*(L/32+7)];
    
    TB256 tbox[L/32+6][16];
    WAES_TB_TYPE2 tybox[4];
    
private:
	void addRoundKey(W128b &state, int r);
	
    void mixColumns(W128b &state);
	void shiftRows(W128b &state);
	void subBytes(W128b &state);
    
    void inv_mixColumns(W128b &state, int rk);
    void inv_shiftRows(W128b &state);
    void inv_subBytes(W128b &state);
    
	void keyExpansion();
    
private:
	BYTE* rotWord(BYTE* word){
		BYTE tmp = word[0];
		for(int i=0;i<3;i++){
			word[i] = word[i+1];
		}
		word[3] = tmp;
		return word;
	}
    
	BYTE* subWord(BYTE* word){
		for(int i=0;i<4;i++){
			word[i] = sbox[word[i]];
		}
		return word;
	}
    
	BYTE* coefAdd(BYTE* word,int index){
        // only first 20 is useful
        static BYTE xtime[64] = {
            0x02,0x01,0x02,0x04,0x08,0x10,0x20,0x40,
            0x80,0x1B,0x36,0x6C,0xD8,0xAB,0x4D,0x9A,
            0x2F,0x5E,0xBC,0x63,0xC6,0x97,0x35,0x6A,
            0xD4,0xB3,0x7D,0xFA,0xEF,0xC5,0x91,0x39,
            0x72,0xE4,0xD3,0xBD,0x61,0xC2,0x9F,0x25,
            0x4A,0x94,0x33,0x66,0xCC,0x83,0x1D,0x3A,
            0x74,0xE8,0xCB,0x8D,0x01,0x02,0x04,0x08,
            0x10,0x20,0x40,0x80,0x1B,0x36,0x6C,0xD8
        };
        word[0] ^= xtime[index];
		return word;
	}
public:
	AES(const BYTE* key);
    ~AES(){};
	void setKey(const BYTE* key);
	void encryptBlock(const BYTE * in, BYTE * out);
    void decryptBlock(const BYTE * in, BYTE * out);
};


template<keyLength L>
void AES<L>::addRoundKey(W128b &state, int r){
    for(int i=0;i<16;i++){
        state.B[i] ^= m_w[16 * r + i];
    }
}

template<keyLength L>
void AES<L>::mixColumns(W128b &state){
    
    static const BYTE mc[4][4] = {
        {0x02, 0x03, 0x01, 0x01},
        {0x01, 0x02, 0x03, 0x01},
        {0x01, 0x01, 0x02, 0x03},
        {0x03, 0x01, 0x01, 0x02}};
    
    BYTE  res[4];
    
    for (int i = 0; i < 4; i++) {
        
        for(int j=0;j<4;j++){
            res[j] = gmult(mc[j][0], state.B[i * 4 + 0])^
                     gmult(mc[j][1], state.B[i * 4 + 1])^
                     gmult(mc[j][2], state.B[i * 4 + 2])^
                     gmult(mc[j][3], state.B[i * 4 + 3]);
        }
        
        for (int j = 0; j < 4; j++) {
            state.B[i * 4 + j] = res[j];
        }
    }
}

template<keyLength L>
void AES<L>::inv_mixColumns(W128b &state, int rk){
    
    static const BYTE mc[4][4] = {
        {0x0e, 0x0b, 0x0d, 0x09},
        {0x09, 0x0e, 0x0b, 0x0d},
        {0x0d, 0x09, 0x0e, 0x0b},
        {0x0b, 0x0d, 0x09, 0x0e}};
    
    BYTE  res[4];
    
    for (int i = 0; i < 4; i++) {
        
        for(int j=0;j<4;j++){
            res[j] = gmult(mc[j][0], state.B[i * 4 + 0])^
            gmult(mc[j][1], state.B[i * 4 + 1])^
            gmult(mc[j][2], state.B[i * 4 + 2])^
            gmult(mc[j][3], state.B[i * 4 + 3]);
            
        }
        
        for (int j = 0; j < 4; j++) {
            state.B[i * 4 + j] = res[j];
        }
    }
}

// shift rows
// 0  1  2  3        0   5   10  15
// 4  5  6  7    _   4   9   14  3
// 8  9  10 11       8   13  2   7
// 12 13 14 15       12  1   6   11
template<keyLength L>
void AES<L>::shiftRows(W128b &state){
    static const int map[16] = {
        0, 5, 10,15,
        4, 9, 14,3,
        8, 13,2, 7,
        12,1, 6, 11
    };
    BYTE temp[16];

    for(int i=0;i<16;i++)
        temp[i] = state.B[i];
    for(int i=0;i<16;i++)
        state.B[i] = temp[map[i]];
}

// shift rows
// 0  1  2  3        0   13  10  7    | 0   4  8    12  |0   4   8   12
// 4  5  6  7    _   4   1   14  11   | 1   5  9    13  |13  1   5   9
// 8  9  10 11       8   5   2   15   | 2   6  10   14  |10  14  2   6
// 12 13 14 15       12  9   6   3    | 3   7  11   15  |7   11  15  3
template<keyLength L>
void AES<L>::inv_shiftRows(W128b &state){
    static const int map[16] = {
        0, 13, 10,  7,
        4,  1, 14, 11,
        8,  5,  2, 15,
        12, 9,  6,  3
    };
    BYTE temp[16];
    
    for(int i=0;i<16;i++)
        temp[i] = state.B[i];
    for(int i=0;i<16;i++)
        state.B[i] = temp[map[i]];
}


template<keyLength L>
void AES<L>::subBytes(W128b &state){
    
    for(int i=0;i<16;i++){
        state.B[i] = sbox[ state.B[i] ];
    }
}

template<keyLength L>
void AES<L>::inv_subBytes(W128b &state){
    
    for(int i=0;i<16;i++){
        state.B[i] = invSbox[ state.B[i] ];
    }
}

template<keyLength L>
void AES<L>::decryptBlock(const BYTE* in, BYTE *out){
    W128b state;
    
    for(int i=0;i<16;i++)
        state.B[i] = in[i];
    
    //matShow(state.B);
    addRoundKey(state, m_Nr);
    //inv_shiftRows( state );
    //inv_subBytes( state );
    //addRoundKey(state, m_Nr-1);
    int i=0;
    for(i=m_Nr-1;i > 0;i--){
        //std::cout << i << "\n";
        //matShow(state.B);
        //std::cout << "roundkey" << "\n";
        //matShow(m_w + (i+1)*16 );
    
        inv_shiftRows( state );
        //std::cout << "shiftrow" << "\n";
        //matShow(state.B);
        
        inv_subBytes( state );
        //std::cout << "subbyte,shiftrow" << "\n";
        //matShow(state.B);
        
        
        addRoundKey(state,i);
        //std::cout << "addroundkey" << "\n";
        //matShow(state.B);
 
        
        inv_mixColumns( state, i);
        //std::cout << "mixcol" << "\n";
        //matShow(state.B);
    }
    
    //matShow(state.B);
    //addRoundKey(state,1);
    inv_shiftRows( state );
    inv_subBytes( state );
    addRoundKey(state,0);
    
    for(int i=0;i<16;i++)
        out[i] = state.B[i];
    //matShow( state );
}

template<keyLength L>
void AES<L>::encryptBlock(const BYTE* in, BYTE *out){
    W128b state;
    
    for(int i=0;i<16;i++)
        state.B[i] = in[i];
    
    int i=0;
    for(i=0;i<m_Nr-1;i++){
        addRoundKey(state,i);
        //matShow(state.B);
        //matShow(m_w+i*16);
        subBytes( state );
        //matShow(state.B);
        shiftRows( state );
        //matShow(state.B);
        mixColumns( state );
        //matShow(state.B);
    }
    //matShow(state.B);
    addRoundKey(state,m_Nr-1);
    subBytes( state );
    shiftRows( state );
    addRoundKey(state,m_Nr);
    
    for(int i=0;i<16;i++)
            out[i] = state.B[i];
    //matShow( state.B );
    
}

template<keyLength L>
void AES<L>::keyExpansion(){
    
    BYTE temp[4];
    for(int i=0;i < L/8;i++){
        m_w[i] = m_key[i];
    }
    
    for(int i=m_Nk;i < m_Nb * (m_Nr + 1);i++){
        temp[0] = m_w[4 * (i - 1) + 0];
        temp[1] = m_w[4 * (i - 1) + 1];
        temp[2] = m_w[4 * (i - 1) + 2];
        temp[3] = m_w[4 * (i - 1) + 3];
        
        if(i%m_Nk == 0){
            rotWord(temp);
            subWord(temp);
            coefAdd(temp,i/m_Nk);
        }else if(m_Nk>6 && i%m_Nk == 4){
            subWord(temp);
        }
        m_w[4*i+0] = m_w[4 * (i - m_Nk) + 0] ^ temp[0];
        m_w[4*i+1] = m_w[4 * (i - m_Nk) + 1] ^ temp[1];
        m_w[4*i+2] = m_w[4 * (i - m_Nk) + 2] ^ temp[2];
        m_w[4*i+3] = m_w[4 * (i - m_Nk) + 3] ^ temp[3];
    }
}


template<keyLength L>
void AES<L>::setKey(const BYTE* key){
    memset(m_key,'\0',sizeof(m_key));
    //strncpy((char*)m_key,(const char*)key,sizeof(m_key)-1);
    //std::cout<<sizeof(m_key) -1 << std::endl;
    for (int i=0; i<L/8; i++) {
        m_key[i] = key[i];
    }
    keyExpansion();
    memset(m_key,'\0',sizeof(m_key));
}


template<keyLength L>
AES<L>::AES(const BYTE* key):m_Nk(L/32),m_Nr(L/32+6){
    if (NULL != key)
        setKey(key);
}

template<keyLength L>
const int AES<L>::m_Nb = 4;

/*
 * S-box transformation table
 */
template<keyLength L>
const TB256 AES<L>::sbox = {
    // 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, // 0
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, // 1
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, // 2
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, // 3
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, // 4
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, // 5
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, // 6
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, // 7
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, // 8
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, // 9
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, // a
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, // b
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, // c
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, // d
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, // e
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};// f

/*
 * Inverse S-box transformation table
 */
template<keyLength L>
const TB256 AES<L>::invSbox = {
    // 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, // 0
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, // 1
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, // 2
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, // 3
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, // 4
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, // 5
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, // 6
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, // 7
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, // 8
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, // 9
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, // a
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, // b
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, // c
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, // d
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, // e
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d};// f


#endif
